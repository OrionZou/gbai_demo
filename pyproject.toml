[tool.poetry]
name = "workbook-ai"
version = "0.1.0"
description = "工作手册 AI"
authors = ["Orion Zou <orionzou@clonebot.ai>"]
readme = "README.md"
packages = [
    { include = "workbook_ai", from = "src"},
    { include = "agent_runtime", from = "src" },
          ]

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.5.0"
weaviate-client = "^3.25.0"
neo4j = "^5.13.0"
fastapi = "^0.104.0"
uvicorn = "^0.24.0"
loguru = "^0.7.3"
openai = "^1.100.1"
python-dotenv = "^1.1.1"
tenacity = "^9.1.2"
tiktoken = "^0.11.0"
jinja2 = "^3.1.6"
aiohttp = "^3.12.15"
streamlit = "^1.48.1"
charset-normalizer = "^3.4.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
mypy = "^1.7.0"
black = "^23.11.0"
isort = "^5.12.0"


[[tool.poetry.source]]
name = "aliyun"
url = "https://mirrors.aliyun.com/pypi/simple/"
priority = "primary"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src/ai_knowledge_base --cov-report=html --cov-report=term-missing --cov-fail-under=100"

[tool.coverage.run]
source = ["src/ai_knowledge_base"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]